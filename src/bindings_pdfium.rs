/* automatically generated by rust-bindgen 0.71.1 */

pub const FPDF_OBJECT_UNKNOWN: u32 = 0;
pub const FPDF_OBJECT_BOOLEAN: u32 = 1;
pub const FPDF_OBJECT_NUMBER: u32 = 2;
pub const FPDF_OBJECT_STRING: u32 = 3;
pub const FPDF_OBJECT_NAME: u32 = 4;
pub const FPDF_OBJECT_ARRAY: u32 = 5;
pub const FPDF_OBJECT_DICTIONARY: u32 = 6;
pub const FPDF_OBJECT_STREAM: u32 = 7;
pub const FPDF_OBJECT_NULLOBJ: u32 = 8;
pub const FPDF_OBJECT_REFERENCE: u32 = 9;
pub const FPDF_POLICY_MACHINETIME_ACCESS: u32 = 0;
pub const FPDF_ERR_SUCCESS: u32 = 0;
pub const FPDF_ERR_UNKNOWN: u32 = 1;
pub const FPDF_ERR_FILE: u32 = 2;
pub const FPDF_ERR_FORMAT: u32 = 3;
pub const FPDF_ERR_PASSWORD: u32 = 4;
pub const FPDF_ERR_SECURITY: u32 = 5;
pub const FPDF_ERR_PAGE: u32 = 6;
pub const FPDF_ANNOT: u32 = 1;
pub const FPDF_LCD_TEXT: u32 = 2;
pub const FPDF_NO_NATIVETEXT: u32 = 4;
pub const FPDF_GRAYSCALE: u32 = 8;
pub const FPDF_DEBUG_INFO: u32 = 128;
pub const FPDF_NO_CATCH: u32 = 256;
pub const FPDF_RENDER_LIMITEDIMAGECACHE: u32 = 512;
pub const FPDF_RENDER_FORCEHALFTONE: u32 = 1024;
pub const FPDF_PRINTING: u32 = 2048;
pub const FPDF_RENDER_NO_SMOOTHTEXT: u32 = 4096;
pub const FPDF_RENDER_NO_SMOOTHIMAGE: u32 = 8192;
pub const FPDF_RENDER_NO_SMOOTHPATH: u32 = 16384;
pub const FPDF_REVERSE_BYTE_ORDER: u32 = 16;
pub const FPDF_CONVERT_FILL_TO_STROKE: u32 = 32;
pub const FPDFBitmap_Unknown: u32 = 0;
pub const FPDFBitmap_Gray: u32 = 1;
pub const FPDFBitmap_BGR: u32 = 2;
pub const FPDFBitmap_BGRx: u32 = 3;
pub const FPDFBitmap_BGRA: u32 = 4;
pub const FPDFBitmap_BGRA_Premul: u32 = 5;
pub type wchar_t = ::std::os::raw::c_int;
pub type max_align_t = f64;
pub const FPDF_TEXT_RENDERMODE_FPDF_TEXTRENDERMODE_UNKNOWN: FPDF_TEXT_RENDERMODE = -1;
pub const FPDF_TEXT_RENDERMODE_FPDF_TEXTRENDERMODE_FILL: FPDF_TEXT_RENDERMODE = 0;
pub const FPDF_TEXT_RENDERMODE_FPDF_TEXTRENDERMODE_STROKE: FPDF_TEXT_RENDERMODE = 1;
pub const FPDF_TEXT_RENDERMODE_FPDF_TEXTRENDERMODE_FILL_STROKE: FPDF_TEXT_RENDERMODE = 2;
pub const FPDF_TEXT_RENDERMODE_FPDF_TEXTRENDERMODE_INVISIBLE: FPDF_TEXT_RENDERMODE = 3;
pub const FPDF_TEXT_RENDERMODE_FPDF_TEXTRENDERMODE_FILL_CLIP: FPDF_TEXT_RENDERMODE = 4;
pub const FPDF_TEXT_RENDERMODE_FPDF_TEXTRENDERMODE_STROKE_CLIP: FPDF_TEXT_RENDERMODE = 5;
pub const FPDF_TEXT_RENDERMODE_FPDF_TEXTRENDERMODE_FILL_STROKE_CLIP: FPDF_TEXT_RENDERMODE = 6;
pub const FPDF_TEXT_RENDERMODE_FPDF_TEXTRENDERMODE_CLIP: FPDF_TEXT_RENDERMODE = 7;
pub const FPDF_TEXT_RENDERMODE_FPDF_TEXTRENDERMODE_LAST: FPDF_TEXT_RENDERMODE = 7;
pub type FPDF_TEXT_RENDERMODE = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fpdf_action_t__ {
    _unused: [u8; 0],
}
pub type FPDF_ACTION = *mut fpdf_action_t__;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fpdf_annotation_t__ {
    _unused: [u8; 0],
}
pub type FPDF_ANNOTATION = *mut fpdf_annotation_t__;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fpdf_attachment_t__ {
    _unused: [u8; 0],
}
pub type FPDF_ATTACHMENT = *mut fpdf_attachment_t__;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fpdf_avail_t__ {
    _unused: [u8; 0],
}
pub type FPDF_AVAIL = *mut fpdf_avail_t__;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fpdf_bitmap_t__ {
    _unused: [u8; 0],
}
pub type FPDF_BITMAP = *mut fpdf_bitmap_t__;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fpdf_bookmark_t__ {
    _unused: [u8; 0],
}
pub type FPDF_BOOKMARK = *mut fpdf_bookmark_t__;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fpdf_clippath_t__ {
    _unused: [u8; 0],
}
pub type FPDF_CLIPPATH = *mut fpdf_clippath_t__;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fpdf_dest_t__ {
    _unused: [u8; 0],
}
pub type FPDF_DEST = *mut fpdf_dest_t__;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fpdf_document_t__ {
    _unused: [u8; 0],
}
pub type FPDF_DOCUMENT = *mut fpdf_document_t__;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fpdf_font_t__ {
    _unused: [u8; 0],
}
pub type FPDF_FONT = *mut fpdf_font_t__;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fpdf_form_handle_t__ {
    _unused: [u8; 0],
}
pub type FPDF_FORMHANDLE = *mut fpdf_form_handle_t__;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fpdf_glyphpath_t__ {
    _unused: [u8; 0],
}
pub type FPDF_GLYPHPATH = *const fpdf_glyphpath_t__;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fpdf_javascript_action_t {
    _unused: [u8; 0],
}
pub type FPDF_JAVASCRIPT_ACTION = *mut fpdf_javascript_action_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fpdf_link_t__ {
    _unused: [u8; 0],
}
pub type FPDF_LINK = *mut fpdf_link_t__;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fpdf_page_t__ {
    _unused: [u8; 0],
}
pub type FPDF_PAGE = *mut fpdf_page_t__;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fpdf_pagelink_t__ {
    _unused: [u8; 0],
}
pub type FPDF_PAGELINK = *mut fpdf_pagelink_t__;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fpdf_pageobject_t__ {
    _unused: [u8; 0],
}
pub type FPDF_PAGEOBJECT = *mut fpdf_pageobject_t__;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fpdf_pageobjectmark_t__ {
    _unused: [u8; 0],
}
pub type FPDF_PAGEOBJECTMARK = *mut fpdf_pageobjectmark_t__;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fpdf_pagerange_t__ {
    _unused: [u8; 0],
}
pub type FPDF_PAGERANGE = *const fpdf_pagerange_t__;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fpdf_pathsegment_t {
    _unused: [u8; 0],
}
pub type FPDF_PATHSEGMENT = *const fpdf_pathsegment_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fpdf_schhandle_t__ {
    _unused: [u8; 0],
}
pub type FPDF_SCHHANDLE = *mut fpdf_schhandle_t__;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fpdf_signature_t__ {
    _unused: [u8; 0],
}
pub type FPDF_SIGNATURE = *const fpdf_signature_t__;
pub type FPDF_SKIA_CANVAS = *mut ::std::os::raw::c_void;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fpdf_structelement_t__ {
    _unused: [u8; 0],
}
pub type FPDF_STRUCTELEMENT = *mut fpdf_structelement_t__;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fpdf_structelement_attr_t__ {
    _unused: [u8; 0],
}
pub type FPDF_STRUCTELEMENT_ATTR = *const fpdf_structelement_attr_t__;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fpdf_structelement_attr_value_t__ {
    _unused: [u8; 0],
}
pub type FPDF_STRUCTELEMENT_ATTR_VALUE = *const fpdf_structelement_attr_value_t__;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fpdf_structtree_t__ {
    _unused: [u8; 0],
}
pub type FPDF_STRUCTTREE = *mut fpdf_structtree_t__;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fpdf_textpage_t__ {
    _unused: [u8; 0],
}
pub type FPDF_TEXTPAGE = *mut fpdf_textpage_t__;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fpdf_widget_t__ {
    _unused: [u8; 0],
}
pub type FPDF_WIDGET = *mut fpdf_widget_t__;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fpdf_xobject_t__ {
    _unused: [u8; 0],
}
pub type FPDF_XOBJECT = *mut fpdf_xobject_t__;
pub type FPDF_BOOL = ::std::os::raw::c_int;
pub type FPDF_RESULT = ::std::os::raw::c_int;
pub type FPDF_DWORD = ::std::os::raw::c_ulong;
pub type FS_FLOAT = f32;
pub const _FPDF_DUPLEXTYPE__DuplexUndefined: _FPDF_DUPLEXTYPE_ = 0;
pub const _FPDF_DUPLEXTYPE__Simplex: _FPDF_DUPLEXTYPE_ = 1;
pub const _FPDF_DUPLEXTYPE__DuplexFlipShortEdge: _FPDF_DUPLEXTYPE_ = 2;
pub const _FPDF_DUPLEXTYPE__DuplexFlipLongEdge: _FPDF_DUPLEXTYPE_ = 3;
pub type _FPDF_DUPLEXTYPE_ = ::std::os::raw::c_uint;
pub use self::_FPDF_DUPLEXTYPE_ as FPDF_DUPLEXTYPE;
pub type FPDF_WCHAR = ::std::os::raw::c_ushort;
pub type FPDF_BYTESTRING = *const ::std::os::raw::c_char;
pub type FPDF_WIDESTRING = *const FPDF_WCHAR;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FPDF_BSTR_ {
    pub str_: *mut ::std::os::raw::c_char,
    pub len: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of FPDF_BSTR_"][::std::mem::size_of::<FPDF_BSTR_>() - 16usize];
    ["Alignment of FPDF_BSTR_"][::std::mem::align_of::<FPDF_BSTR_>() - 8usize];
    ["Offset of field: FPDF_BSTR_::str_"][::std::mem::offset_of!(FPDF_BSTR_, str_) - 0usize];
    ["Offset of field: FPDF_BSTR_::len"][::std::mem::offset_of!(FPDF_BSTR_, len) - 8usize];
};
pub type FPDF_BSTR = FPDF_BSTR_;
pub type FPDF_STRING = *const ::std::os::raw::c_char;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FS_MATRIX_ {
    pub a: f32,
    pub b: f32,
    pub c: f32,
    pub d: f32,
    pub e: f32,
    pub f: f32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _FS_MATRIX_"][::std::mem::size_of::<_FS_MATRIX_>() - 24usize];
    ["Alignment of _FS_MATRIX_"][::std::mem::align_of::<_FS_MATRIX_>() - 4usize];
    ["Offset of field: _FS_MATRIX_::a"][::std::mem::offset_of!(_FS_MATRIX_, a) - 0usize];
    ["Offset of field: _FS_MATRIX_::b"][::std::mem::offset_of!(_FS_MATRIX_, b) - 4usize];
    ["Offset of field: _FS_MATRIX_::c"][::std::mem::offset_of!(_FS_MATRIX_, c) - 8usize];
    ["Offset of field: _FS_MATRIX_::d"][::std::mem::offset_of!(_FS_MATRIX_, d) - 12usize];
    ["Offset of field: _FS_MATRIX_::e"][::std::mem::offset_of!(_FS_MATRIX_, e) - 16usize];
    ["Offset of field: _FS_MATRIX_::f"][::std::mem::offset_of!(_FS_MATRIX_, f) - 20usize];
};
pub type FS_MATRIX = _FS_MATRIX_;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FS_RECTF_ {
    pub left: f32,
    pub top: f32,
    pub right: f32,
    pub bottom: f32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _FS_RECTF_"][::std::mem::size_of::<_FS_RECTF_>() - 16usize];
    ["Alignment of _FS_RECTF_"][::std::mem::align_of::<_FS_RECTF_>() - 4usize];
    ["Offset of field: _FS_RECTF_::left"][::std::mem::offset_of!(_FS_RECTF_, left) - 0usize];
    ["Offset of field: _FS_RECTF_::top"][::std::mem::offset_of!(_FS_RECTF_, top) - 4usize];
    ["Offset of field: _FS_RECTF_::right"][::std::mem::offset_of!(_FS_RECTF_, right) - 8usize];
    ["Offset of field: _FS_RECTF_::bottom"][::std::mem::offset_of!(_FS_RECTF_, bottom) - 12usize];
};
pub type FS_LPRECTF = *mut _FS_RECTF_;
pub type FS_RECTF = _FS_RECTF_;
pub type FS_LPCRECTF = *const FS_RECTF;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FS_SIZEF_ {
    pub width: f32,
    pub height: f32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of FS_SIZEF_"][::std::mem::size_of::<FS_SIZEF_>() - 8usize];
    ["Alignment of FS_SIZEF_"][::std::mem::align_of::<FS_SIZEF_>() - 4usize];
    ["Offset of field: FS_SIZEF_::width"][::std::mem::offset_of!(FS_SIZEF_, width) - 0usize];
    ["Offset of field: FS_SIZEF_::height"][::std::mem::offset_of!(FS_SIZEF_, height) - 4usize];
};
pub type FS_LPSIZEF = *mut FS_SIZEF_;
pub type FS_SIZEF = FS_SIZEF_;
pub type FS_LPCSIZEF = *const FS_SIZEF;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FS_POINTF_ {
    pub x: f32,
    pub y: f32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of FS_POINTF_"][::std::mem::size_of::<FS_POINTF_>() - 8usize];
    ["Alignment of FS_POINTF_"][::std::mem::align_of::<FS_POINTF_>() - 4usize];
    ["Offset of field: FS_POINTF_::x"][::std::mem::offset_of!(FS_POINTF_, x) - 0usize];
    ["Offset of field: FS_POINTF_::y"][::std::mem::offset_of!(FS_POINTF_, y) - 4usize];
};
pub type FS_LPPOINTF = *mut FS_POINTF_;
pub type FS_POINTF = FS_POINTF_;
pub type FS_LPCPOINTF = *const FS_POINTF;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FS_QUADPOINTSF {
    pub x1: FS_FLOAT,
    pub y1: FS_FLOAT,
    pub x2: FS_FLOAT,
    pub y2: FS_FLOAT,
    pub x3: FS_FLOAT,
    pub y3: FS_FLOAT,
    pub x4: FS_FLOAT,
    pub y4: FS_FLOAT,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _FS_QUADPOINTSF"][::std::mem::size_of::<_FS_QUADPOINTSF>() - 32usize];
    ["Alignment of _FS_QUADPOINTSF"][::std::mem::align_of::<_FS_QUADPOINTSF>() - 4usize];
    ["Offset of field: _FS_QUADPOINTSF::x1"][::std::mem::offset_of!(_FS_QUADPOINTSF, x1) - 0usize];
    ["Offset of field: _FS_QUADPOINTSF::y1"][::std::mem::offset_of!(_FS_QUADPOINTSF, y1) - 4usize];
    ["Offset of field: _FS_QUADPOINTSF::x2"][::std::mem::offset_of!(_FS_QUADPOINTSF, x2) - 8usize];
    ["Offset of field: _FS_QUADPOINTSF::y2"][::std::mem::offset_of!(_FS_QUADPOINTSF, y2) - 12usize];
    ["Offset of field: _FS_QUADPOINTSF::x3"][::std::mem::offset_of!(_FS_QUADPOINTSF, x3) - 16usize];
    ["Offset of field: _FS_QUADPOINTSF::y3"][::std::mem::offset_of!(_FS_QUADPOINTSF, y3) - 20usize];
    ["Offset of field: _FS_QUADPOINTSF::x4"][::std::mem::offset_of!(_FS_QUADPOINTSF, x4) - 24usize];
    ["Offset of field: _FS_QUADPOINTSF::y4"][::std::mem::offset_of!(_FS_QUADPOINTSF, y4) - 28usize];
};
pub type FS_QUADPOINTSF = _FS_QUADPOINTSF;
pub type FPDF_ANNOTATION_SUBTYPE = ::std::os::raw::c_int;
pub type FPDF_ANNOT_APPEARANCEMODE = ::std::os::raw::c_int;
pub type FPDF_OBJECT_TYPE = ::std::os::raw::c_int;
pub const FPDF_RENDERER_TYPE_FPDF_RENDERERTYPE_AGG: FPDF_RENDERER_TYPE = 0;
pub const FPDF_RENDERER_TYPE_FPDF_RENDERERTYPE_SKIA: FPDF_RENDERER_TYPE = 1;
pub type FPDF_RENDERER_TYPE = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FPDF_LIBRARY_CONFIG_ {
    pub version: ::std::os::raw::c_int,
    pub m_pUserFontPaths: *mut *const ::std::os::raw::c_char,
    pub m_pIsolate: *mut ::std::os::raw::c_void,
    pub m_v8EmbedderSlot: ::std::os::raw::c_uint,
    pub m_pPlatform: *mut ::std::os::raw::c_void,
    pub m_RendererType: FPDF_RENDERER_TYPE,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of FPDF_LIBRARY_CONFIG_"][::std::mem::size_of::<FPDF_LIBRARY_CONFIG_>() - 48usize];
    ["Alignment of FPDF_LIBRARY_CONFIG_"][::std::mem::align_of::<FPDF_LIBRARY_CONFIG_>() - 8usize];
    ["Offset of field: FPDF_LIBRARY_CONFIG_::version"]
        [::std::mem::offset_of!(FPDF_LIBRARY_CONFIG_, version) - 0usize];
    ["Offset of field: FPDF_LIBRARY_CONFIG_::m_pUserFontPaths"]
        [::std::mem::offset_of!(FPDF_LIBRARY_CONFIG_, m_pUserFontPaths) - 8usize];
    ["Offset of field: FPDF_LIBRARY_CONFIG_::m_pIsolate"]
        [::std::mem::offset_of!(FPDF_LIBRARY_CONFIG_, m_pIsolate) - 16usize];
    ["Offset of field: FPDF_LIBRARY_CONFIG_::m_v8EmbedderSlot"]
        [::std::mem::offset_of!(FPDF_LIBRARY_CONFIG_, m_v8EmbedderSlot) - 24usize];
    ["Offset of field: FPDF_LIBRARY_CONFIG_::m_pPlatform"]
        [::std::mem::offset_of!(FPDF_LIBRARY_CONFIG_, m_pPlatform) - 32usize];
    ["Offset of field: FPDF_LIBRARY_CONFIG_::m_RendererType"]
        [::std::mem::offset_of!(FPDF_LIBRARY_CONFIG_, m_RendererType) - 40usize];
};
pub type FPDF_LIBRARY_CONFIG = FPDF_LIBRARY_CONFIG_;
unsafe extern "C" {
    pub fn FPDF_InitLibraryWithConfig(config: *const FPDF_LIBRARY_CONFIG);
}
unsafe extern "C" {
    pub fn FPDF_InitLibrary();
}
unsafe extern "C" {
    pub fn FPDF_DestroyLibrary();
}
unsafe extern "C" {
    pub fn FPDF_SetSandBoxPolicy(policy: FPDF_DWORD, enable: FPDF_BOOL);
}
unsafe extern "C" {
    pub fn FPDF_LoadDocument(file_path: FPDF_STRING, password: FPDF_BYTESTRING) -> FPDF_DOCUMENT;
}
unsafe extern "C" {
    pub fn FPDF_LoadMemDocument(
        data_buf: *const ::std::os::raw::c_void,
        size: ::std::os::raw::c_int,
        password: FPDF_BYTESTRING,
    ) -> FPDF_DOCUMENT;
}
unsafe extern "C" {
    pub fn FPDF_LoadMemDocument64(
        data_buf: *const ::std::os::raw::c_void,
        size: usize,
        password: FPDF_BYTESTRING,
    ) -> FPDF_DOCUMENT;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FPDF_FILEACCESS {
    pub m_FileLen: ::std::os::raw::c_ulong,
    pub m_GetBlock: ::std::option::Option<
        unsafe extern "C" fn(
            param: *mut ::std::os::raw::c_void,
            position: ::std::os::raw::c_ulong,
            pBuf: *mut ::std::os::raw::c_uchar,
            size: ::std::os::raw::c_ulong,
        ) -> ::std::os::raw::c_int,
    >,
    pub m_Param: *mut ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of FPDF_FILEACCESS"][::std::mem::size_of::<FPDF_FILEACCESS>() - 24usize];
    ["Alignment of FPDF_FILEACCESS"][::std::mem::align_of::<FPDF_FILEACCESS>() - 8usize];
    ["Offset of field: FPDF_FILEACCESS::m_FileLen"]
        [::std::mem::offset_of!(FPDF_FILEACCESS, m_FileLen) - 0usize];
    ["Offset of field: FPDF_FILEACCESS::m_GetBlock"]
        [::std::mem::offset_of!(FPDF_FILEACCESS, m_GetBlock) - 8usize];
    ["Offset of field: FPDF_FILEACCESS::m_Param"]
        [::std::mem::offset_of!(FPDF_FILEACCESS, m_Param) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FPDF_FILEHANDLER_ {
    pub clientData: *mut ::std::os::raw::c_void,
    pub Release:
        ::std::option::Option<unsafe extern "C" fn(clientData: *mut ::std::os::raw::c_void)>,
    pub GetSize: ::std::option::Option<
        unsafe extern "C" fn(clientData: *mut ::std::os::raw::c_void) -> FPDF_DWORD,
    >,
    pub ReadBlock: ::std::option::Option<
        unsafe extern "C" fn(
            clientData: *mut ::std::os::raw::c_void,
            offset: FPDF_DWORD,
            buffer: *mut ::std::os::raw::c_void,
            size: FPDF_DWORD,
        ) -> FPDF_RESULT,
    >,
    pub WriteBlock: ::std::option::Option<
        unsafe extern "C" fn(
            clientData: *mut ::std::os::raw::c_void,
            offset: FPDF_DWORD,
            buffer: *const ::std::os::raw::c_void,
            size: FPDF_DWORD,
        ) -> FPDF_RESULT,
    >,
    pub Flush: ::std::option::Option<
        unsafe extern "C" fn(clientData: *mut ::std::os::raw::c_void) -> FPDF_RESULT,
    >,
    pub Truncate: ::std::option::Option<
        unsafe extern "C" fn(
            clientData: *mut ::std::os::raw::c_void,
            size: FPDF_DWORD,
        ) -> FPDF_RESULT,
    >,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of FPDF_FILEHANDLER_"][::std::mem::size_of::<FPDF_FILEHANDLER_>() - 56usize];
    ["Alignment of FPDF_FILEHANDLER_"][::std::mem::align_of::<FPDF_FILEHANDLER_>() - 8usize];
    ["Offset of field: FPDF_FILEHANDLER_::clientData"]
        [::std::mem::offset_of!(FPDF_FILEHANDLER_, clientData) - 0usize];
    ["Offset of field: FPDF_FILEHANDLER_::Release"]
        [::std::mem::offset_of!(FPDF_FILEHANDLER_, Release) - 8usize];
    ["Offset of field: FPDF_FILEHANDLER_::GetSize"]
        [::std::mem::offset_of!(FPDF_FILEHANDLER_, GetSize) - 16usize];
    ["Offset of field: FPDF_FILEHANDLER_::ReadBlock"]
        [::std::mem::offset_of!(FPDF_FILEHANDLER_, ReadBlock) - 24usize];
    ["Offset of field: FPDF_FILEHANDLER_::WriteBlock"]
        [::std::mem::offset_of!(FPDF_FILEHANDLER_, WriteBlock) - 32usize];
    ["Offset of field: FPDF_FILEHANDLER_::Flush"]
        [::std::mem::offset_of!(FPDF_FILEHANDLER_, Flush) - 40usize];
    ["Offset of field: FPDF_FILEHANDLER_::Truncate"]
        [::std::mem::offset_of!(FPDF_FILEHANDLER_, Truncate) - 48usize];
};
pub type FPDF_FILEHANDLER = FPDF_FILEHANDLER_;
unsafe extern "C" {
    pub fn FPDF_LoadCustomDocument(
        pFileAccess: *mut FPDF_FILEACCESS,
        password: FPDF_BYTESTRING,
    ) -> FPDF_DOCUMENT;
}
unsafe extern "C" {
    pub fn FPDF_GetFileVersion(
        doc: FPDF_DOCUMENT,
        fileVersion: *mut ::std::os::raw::c_int,
    ) -> FPDF_BOOL;
}
unsafe extern "C" {
    pub fn FPDF_GetLastError() -> ::std::os::raw::c_ulong;
}
unsafe extern "C" {
    pub fn FPDF_DocumentHasValidCrossReferenceTable(document: FPDF_DOCUMENT) -> FPDF_BOOL;
}
unsafe extern "C" {
    pub fn FPDF_GetTrailerEnds(
        document: FPDF_DOCUMENT,
        buffer: *mut ::std::os::raw::c_uint,
        length: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_ulong;
}
unsafe extern "C" {
    pub fn FPDF_GetDocPermissions(document: FPDF_DOCUMENT) -> ::std::os::raw::c_ulong;
}
unsafe extern "C" {
    pub fn FPDF_GetDocUserPermissions(document: FPDF_DOCUMENT) -> ::std::os::raw::c_ulong;
}
unsafe extern "C" {
    pub fn FPDF_GetSecurityHandlerRevision(document: FPDF_DOCUMENT) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn FPDF_GetPageCount(document: FPDF_DOCUMENT) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn FPDF_LoadPage(document: FPDF_DOCUMENT, page_index: ::std::os::raw::c_int) -> FPDF_PAGE;
}
unsafe extern "C" {
    pub fn FPDF_GetPageWidthF(page: FPDF_PAGE) -> f32;
}
unsafe extern "C" {
    pub fn FPDF_GetPageWidth(page: FPDF_PAGE) -> f64;
}
unsafe extern "C" {
    pub fn FPDF_GetPageHeightF(page: FPDF_PAGE) -> f32;
}
unsafe extern "C" {
    pub fn FPDF_GetPageHeight(page: FPDF_PAGE) -> f64;
}
unsafe extern "C" {
    pub fn FPDF_GetPageBoundingBox(page: FPDF_PAGE, rect: *mut FS_RECTF) -> FPDF_BOOL;
}
unsafe extern "C" {
    pub fn FPDF_GetPageSizeByIndexF(
        document: FPDF_DOCUMENT,
        page_index: ::std::os::raw::c_int,
        size: *mut FS_SIZEF,
    ) -> FPDF_BOOL;
}
unsafe extern "C" {
    pub fn FPDF_GetPageSizeByIndex(
        document: FPDF_DOCUMENT,
        page_index: ::std::os::raw::c_int,
        width: *mut f64,
        height: *mut f64,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FPDF_COLORSCHEME_ {
    pub path_fill_color: FPDF_DWORD,
    pub path_stroke_color: FPDF_DWORD,
    pub text_fill_color: FPDF_DWORD,
    pub text_stroke_color: FPDF_DWORD,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of FPDF_COLORSCHEME_"][::std::mem::size_of::<FPDF_COLORSCHEME_>() - 32usize];
    ["Alignment of FPDF_COLORSCHEME_"][::std::mem::align_of::<FPDF_COLORSCHEME_>() - 8usize];
    ["Offset of field: FPDF_COLORSCHEME_::path_fill_color"]
        [::std::mem::offset_of!(FPDF_COLORSCHEME_, path_fill_color) - 0usize];
    ["Offset of field: FPDF_COLORSCHEME_::path_stroke_color"]
        [::std::mem::offset_of!(FPDF_COLORSCHEME_, path_stroke_color) - 8usize];
    ["Offset of field: FPDF_COLORSCHEME_::text_fill_color"]
        [::std::mem::offset_of!(FPDF_COLORSCHEME_, text_fill_color) - 16usize];
    ["Offset of field: FPDF_COLORSCHEME_::text_stroke_color"]
        [::std::mem::offset_of!(FPDF_COLORSCHEME_, text_stroke_color) - 24usize];
};
pub type FPDF_COLORSCHEME = FPDF_COLORSCHEME_;
unsafe extern "C" {
    pub fn FPDF_RenderPageBitmap(
        bitmap: FPDF_BITMAP,
        page: FPDF_PAGE,
        start_x: ::std::os::raw::c_int,
        start_y: ::std::os::raw::c_int,
        size_x: ::std::os::raw::c_int,
        size_y: ::std::os::raw::c_int,
        rotate: ::std::os::raw::c_int,
        flags: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn FPDF_RenderPageBitmapWithMatrix(
        bitmap: FPDF_BITMAP,
        page: FPDF_PAGE,
        matrix: *const FS_MATRIX,
        clipping: *const FS_RECTF,
        flags: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn FPDF_ClosePage(page: FPDF_PAGE);
}
unsafe extern "C" {
    pub fn FPDF_CloseDocument(document: FPDF_DOCUMENT);
}
unsafe extern "C" {
    pub fn FPDF_DeviceToPage(
        page: FPDF_PAGE,
        start_x: ::std::os::raw::c_int,
        start_y: ::std::os::raw::c_int,
        size_x: ::std::os::raw::c_int,
        size_y: ::std::os::raw::c_int,
        rotate: ::std::os::raw::c_int,
        device_x: ::std::os::raw::c_int,
        device_y: ::std::os::raw::c_int,
        page_x: *mut f64,
        page_y: *mut f64,
    ) -> FPDF_BOOL;
}
unsafe extern "C" {
    pub fn FPDF_PageToDevice(
        page: FPDF_PAGE,
        start_x: ::std::os::raw::c_int,
        start_y: ::std::os::raw::c_int,
        size_x: ::std::os::raw::c_int,
        size_y: ::std::os::raw::c_int,
        rotate: ::std::os::raw::c_int,
        page_x: f64,
        page_y: f64,
        device_x: *mut ::std::os::raw::c_int,
        device_y: *mut ::std::os::raw::c_int,
    ) -> FPDF_BOOL;
}
unsafe extern "C" {
    pub fn FPDFBitmap_Create(
        width: ::std::os::raw::c_int,
        height: ::std::os::raw::c_int,
        alpha: ::std::os::raw::c_int,
    ) -> FPDF_BITMAP;
}
unsafe extern "C" {
    pub fn FPDFBitmap_CreateEx(
        width: ::std::os::raw::c_int,
        height: ::std::os::raw::c_int,
        format: ::std::os::raw::c_int,
        first_scan: *mut ::std::os::raw::c_void,
        stride: ::std::os::raw::c_int,
    ) -> FPDF_BITMAP;
}
unsafe extern "C" {
    pub fn FPDFBitmap_GetFormat(bitmap: FPDF_BITMAP) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn FPDFBitmap_FillRect(
        bitmap: FPDF_BITMAP,
        left: ::std::os::raw::c_int,
        top: ::std::os::raw::c_int,
        width: ::std::os::raw::c_int,
        height: ::std::os::raw::c_int,
        color: FPDF_DWORD,
    ) -> FPDF_BOOL;
}
unsafe extern "C" {
    pub fn FPDFBitmap_GetBuffer(bitmap: FPDF_BITMAP) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn FPDFBitmap_GetWidth(bitmap: FPDF_BITMAP) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn FPDFBitmap_GetHeight(bitmap: FPDF_BITMAP) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn FPDFBitmap_GetStride(bitmap: FPDF_BITMAP) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn FPDFBitmap_Destroy(bitmap: FPDF_BITMAP);
}
unsafe extern "C" {
    pub fn FPDF_VIEWERREF_GetPrintScaling(document: FPDF_DOCUMENT) -> FPDF_BOOL;
}
unsafe extern "C" {
    pub fn FPDF_VIEWERREF_GetNumCopies(document: FPDF_DOCUMENT) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn FPDF_VIEWERREF_GetPrintPageRange(document: FPDF_DOCUMENT) -> FPDF_PAGERANGE;
}
unsafe extern "C" {
    pub fn FPDF_VIEWERREF_GetPrintPageRangeCount(pagerange: FPDF_PAGERANGE) -> usize;
}
unsafe extern "C" {
    pub fn FPDF_VIEWERREF_GetPrintPageRangeElement(
        pagerange: FPDF_PAGERANGE,
        index: usize,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn FPDF_VIEWERREF_GetDuplex(document: FPDF_DOCUMENT) -> FPDF_DUPLEXTYPE;
}
unsafe extern "C" {
    pub fn FPDF_VIEWERREF_GetName(
        document: FPDF_DOCUMENT,
        key: FPDF_BYTESTRING,
        buffer: *mut ::std::os::raw::c_char,
        length: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_ulong;
}
unsafe extern "C" {
    pub fn FPDF_CountNamedDests(document: FPDF_DOCUMENT) -> FPDF_DWORD;
}
unsafe extern "C" {
    pub fn FPDF_GetNamedDestByName(document: FPDF_DOCUMENT, name: FPDF_BYTESTRING) -> FPDF_DEST;
}
unsafe extern "C" {
    pub fn FPDF_GetNamedDest(
        document: FPDF_DOCUMENT,
        index: ::std::os::raw::c_int,
        buffer: *mut ::std::os::raw::c_void,
        buflen: *mut ::std::os::raw::c_long,
    ) -> FPDF_DEST;
}
unsafe extern "C" {
    pub fn FPDF_GetXFAPacketCount(document: FPDF_DOCUMENT) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn FPDF_GetXFAPacketName(
        document: FPDF_DOCUMENT,
        index: ::std::os::raw::c_int,
        buffer: *mut ::std::os::raw::c_void,
        buflen: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_ulong;
}
unsafe extern "C" {
    pub fn FPDF_GetXFAPacketContent(
        document: FPDF_DOCUMENT,
        index: ::std::os::raw::c_int,
        buffer: *mut ::std::os::raw::c_void,
        buflen: ::std::os::raw::c_ulong,
        out_buflen: *mut ::std::os::raw::c_ulong,
    ) -> FPDF_BOOL;
}
